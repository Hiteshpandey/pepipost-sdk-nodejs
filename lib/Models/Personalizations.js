/**
 * PepipostLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of Personalizations
 */
class Personalizations extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.recipient = this.constructor.getValue(obj.recipient);
        this.xApiheaderCc = this.constructor.getValue(obj.xApiheaderCc || obj['x-apiheader_cc']);
        this.xApiheader = this.constructor.getValue(obj.xApiheader || obj['x-apiheader']);
        this.attributes = this.constructor.getValue(obj.attributes);
        this.xheaders = this.constructor.getValue(obj.xheaders || obj['x-headers']);
        this.attachments = this.constructor.getValue(obj.attachments);
        this.recipientCc = this.constructor.getValue(obj.recipientCc || obj.recipient_cc);
        this.recipientBcc = this.constructor.getValue(obj.recipientBcc || obj.recipient_bcc);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'recipient', realName: 'recipient' },
            { name: 'xApiheaderCc', realName: 'x-apiheader_cc' },
            { name: 'xApiheader', realName: 'x-apiheader' },
            { name: 'attributes', realName: 'attributes' },
            { name: 'xheaders', realName: 'x-headers' },
            { name: 'attachments', realName: 'attachments', array: true, type: 'Attachments' },
            { name: 'recipientCc', realName: 'recipient_cc', array: true },
            { name: 'recipientBcc', realName: 'recipient_bcc', array: true },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = Personalizations;
