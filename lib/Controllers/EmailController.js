/**
 * PepipostLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');

class EmailController {
    /**
     * This Endpoint sends emails with the credentials passed.
     *
     * @param {string} apiKey (optional) Generated header parameter. Example value
     * ='5ce7096ed4bf2b39dfa932ff5fa84ed9ed8'
     * @param {EmailBody} body (optional) The body passed will be json format.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createSendEmail(apiKey, body, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/v2/sendEmail'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
	    'user-agent': 'pepi-sdk-nodejs v2',
            accept: 'application/json',
            'content-type': 'application/json; charset=utf-8',
            api_key: apiKey,
        };

        // remove null values
        _apiHelper.cleanObject(body);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            body: _apiHelper.jsonSerialize(body),
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    _fulfill(_response.body);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 405) {
                    const _err = { errorMessage: 'Method not allowed',
                        errorCode: 405,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    _fulfill(_response.body);
                   }
            });
        });
    }
}
module.exports = EmailController;
